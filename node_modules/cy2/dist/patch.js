"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.patch = patch;
exports.run = run;
var _fs = _interopRequireDefault(require("fs"));
var _childProcess = _interopRequireDefault(require("child_process"));
var _jsYaml = _interopRequireDefault(require("js-yaml"));
var _debug = require("./debug");
var _discovery = require("./discovery");
var _binPath = require("./bin-path");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _patch() {
    _patch = _asyncToGenerator(function*(apiURL, cypressConfigFilePath) {
        if (!apiURL) {
            throw new Error('Missing apiURL');
        }
        const { configFilePath , backupConfigFilePath  } = yield (0, _discovery).getConfigFilesPaths(cypressConfigFilePath);
        (0, _debug).debug('Patching cypress config file: %s', configFilePath);
        try {
            _fs.default.statSync(backupConfigFilePath);
        } catch (e) {
            _fs.default.copyFileSync(configFilePath, backupConfigFilePath);
        }
        const doc = _jsYaml.default.load(_fs.default.readFileSync(configFilePath, 'utf8'));
        doc.production.api_url = apiURL;
        _fs.default.writeFileSync(configFilePath, _jsYaml.default.dump(doc));
    });
    return _patch.apply(this, arguments);
}
function patch(apiURL, cypressConfigFilePath) {
    return _patch.apply(this, arguments);
}
function _run() {
    _run = _asyncToGenerator(function*() {
        const [node, script, ...rest] = process.argv;
        const cliBinPath = yield (0, _binPath).getCypressCLIBinPath();
        (0, _debug).debug('Running cypress from %s', cliBinPath, ...rest);
        const child = _childProcess.default.spawn(cliBinPath, [
            ...rest
        ], {
            stdio: 'inherit'
        });
        child.on('exit', (code)=>process.exit(code !== null && code !== void 0 ? code : 1)
        );
    });
    return _run.apply(this, arguments);
}
function run() {
    return _run.apply(this, arguments);
}
